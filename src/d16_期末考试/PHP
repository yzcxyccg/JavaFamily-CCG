一、	前端+正则
1、验证手机号格式。^1[^02]\d{9}$
手机号的特点：1）1开头；2）第二位不能为0和2；3）11位；
2、验证邮箱格式。^([a-zA-Z0-9_\-\.]+@)([a-zA-Z0-9]+)(\.[a-zA-Z0-9]+)?(\.[a-zA-Z]{2,3})$
3、验证数字IP地址的格式。^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$  192.168.0.1
4、验证身份证格式。^(\d{15})$|^(\d{18})$|^(\d{17})(x|X)$
特点：可能15位|可能18位|可能17位加一个x或X；注意括号和子串的开始结束符23010719990108351X
5网址。^((http|https):\/\/)?([a-zA-Z0-9]+)(\.[a-zA-Z0-9]+)?(\.[a-zA-Z]{2,3})?(\.[a-zA-Z]{2,3})$
例：chinese': /^[\u4e00-\u9fa5]+$/
email:/^\w+(\.)?(\w+)?@[0-9a-z]+(\.[a-z]+){1,3}$/,
phone:/^((13[0-9])|(15[0-37-9])|(18[0235789])|(14[57]))\d{8}$/
<head>
    <meta charset="UTF-8">
    <title>正则表达式验证邮箱</title>
</head>
<body>
<form name="myform" action="back.php" id="form">
    <h2>学生信息管理</h2>
    邮箱地址：<input type="text" maxlength=30 id="email" name="email" value="">
    <input type="button" value="提交" onclick="fun()">
</form>
</body>
<script>
    /*校验邮件地址是否合法 */
    function IsEmail(str) {
        var reg=/^([a-zA-Z0-9_\-\.]+@)([a-zA-Z0-9]+)(\.[a-zA-Z0-9]+)?(\.[a-zA-Z]{2,3})$/;
        return reg.test(str);
        //test()方法验证str串是否匹配模式reg，匹配返回true。
    }
    function  fun(){
        if(!IsEmail(document.getElementById("email").value)){
            alert("邮箱地址错误");
            return false;
        }
        /*运行到这里说明验证通过返回true，submit成功提交表单*/
        alert("提交成功");
        //return true;   // 这里设置为false可禁止提交（测试用），实际项目改为true
        document.getElementById("form").submit();
    }
</script>
二、	逻辑题

练习1：有一口井深10米，一只蜗牛从井底向上爬，白天清醒向上爬2米
晚上睡觉下滑1米，问多少天能爬到井口？
练习2：电影院有4*4的坐席，现第1排第3个、第3排第2个座位有人，
请输出所有无人的座位。
//1
$depth = 10;
$day = 0;

while(true){
    $day++;
    $depth = $depth - 2;
    if($depth <= 0){
        break;
    }else{
        $depth = $depth + 1;
    }
}
echo $day;
//2
echo '无人的座位包括：'."<br>";
for($mk_i = 1;$mk_i <= 4;$mk_i ++){
    for($mk_j = 1;$mk_j <= 4;$mk_j ++){
        if($mk_i == 1 && $mk_j == 3){
            continue;
        }elseif($mk_i == 3 && $mk_j == 2){
            continue;
        }else{
            echo $mk_i.'排'.$mk_j.'号'."<br>";
        }
    }
    echo "<br>";
}
三、	PDO连接数据库增删改查
1.查询
$pdo = new PDO("mysql:host=localhost;dbname=database10","root","root");
$sql = 'select * from members';
$sta = $pdo->prepare($sql);
$sta->execute();
$result = $sta->fetchAll(PDO::FETCH_ASSOC);
//echo "<pre>";
//print_r($result);
//用来尝试直接输出，看结果的形式
include_once('lists.html');

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>昵称</th>
            <th>邮箱</th>
            <th>电话</th>
            <th>等级</th>
            <th>操作</th>
        </tr>
    </thead>
    <tbody>
        <?php foreach($result as $row) { ?>  <!--根据键值的值选行-->
        <tr>
            <td>
                <?php echo $row['id'] ?>
            </td>
            <td>
                <?php echo $row['nickname'] ?>
            </td>
            <td>
                <?php echo $row['email'] ?>
            </td>
            <td>
                <?php echo $row['phone'] ?>
            </td>
            <td><?php echo $row['level'] ?></td>
            <td>
                <button class="btn btn-primary">编辑</button>
                <button class="btn btn-danger">删除</button>
            </td>
        </tr>
        <?php } ?>
    </tbody>
</table>
2.更新
//用PDO连接mysql数据库
$pdo = new PDO("mysql:host=localhost;dbname=database10","root","root");
//准备一条SQL语句
$sql = "update members set email=? where id=?";
//运用prepare方法
$sta = $pdo->prepare($sql);
//运用execute方法，并输入参数
try{
    $sta->execute(array('lisi@hrbust.edu.c','2'));
    echo "执行成功";
}catch(Exception $e){
    $e->getMessage();
}
3.fetchColumn
$pdo = new PDO("mysql:host=localhost;dbname=database10","root","root");
$sql = 'select * from members';  //如果写select *，则输出默认列->第一列
$sta = $pdo->prepare($sql);
$sta->execute();

//$result = $sta->fetchColumn(1);
//echo $result;
//echo "<br>";
include_once('lists.html');
4.sql异常处理 事务处理
/**数据库配置*/

define('DB_HOST','localhost');
define('DB_NAME','database10');
define('DB_PORT','3306');
define('DB_TYPE','mysql');
define('DB_CHARSET','utf8');
define('DB_DSN',DB_TYPE.":host=".DB_HOST.";dbname=".DB_NAME.";charset=".DB_CHARSET);
define('DB_USER','root');
define('DB_PWD','root');

try{
    //连接数据库
    $pdo = new PDO(DB_DSN,DB_USER,DB_PWD);
    //开启事务beginTransaction()，beginTransaction()一旦开启，则自动关闭事务的自动提交
    $pdo->beginTransaction();
    //执行SQL语句。没有参数输入，可以不用prepare，直接exec即可，注意，和prepare不同的是，此处不是execute

    $result1 = $pdo->exec("update members set credits = credits - 10 where nickname = '张三'");
    //不同于默认模式、警告模式、异常模式，如果想要在语句运行失败时能够跳到catch，必须主动抛出一个错误！抛出错误用throw new PDOException
    //$pdo->exec成功返回受影响行数，失败返回0
    //使用prepare的$pdo->execute成功返回true，失败返回false

    if(!$result1){  //必须在错误时主动抛出错误
        throw new PDOException('张三扣除积分失败');
    }
    /**故意写了一个错误的表名：members1*/
    $result2 = $pdo->exec("update members set credits = credits + 10 where nickname = '李四'");
    if(!$result2){
        throw new PDOException('李四增加积分失败');  //注意，'李四增加积分失败'这个字符串不在此处输出，而是在catch中的getMessage()方法中输出，如果不传递该字符串，getMessage()什么都不会输出。但是在默认模式、警告模式和异常模式中，getMessage()会输出官方错误信息！这就是自动输出异常和手工输出异常的区别！
    }
    //提交事务
    $pdo->commit();
    echo '回答采纳成功';

}catch(PDOException $e){
//执行事务回滚rollback()
//输出异常
    $pdo->rollBack();

    echo '错误信息->'.$e->getMessage().'<br>';
    echo '错误代码->'.$e->getCode().'<br>';
    echo '错误文件->'.$e->getFile().'<br>';
    echo '错误行号->'.$e->getLine().'<br>';
    echo '错误追踪->'.$e->getTraceAsString().'<br>';
}
四、	绘制验证码
session_start();                            			//初始化Session变量
header("content-type:image/png");            			//设置创建图像的格式
$image_width  = 76;                            			//设置图像宽度
$image_height = 40;                                  	//设置图像高度
$lenth        = 4;                               		//字符串长度
//除去0、1、o、i容易混淆字符
$str = "23456789abcdefghijkmnpqrstuvwxyzABCDEFGHIJKLMNPQRSTUVW";
$code = '';
for ($i=0; $i<$lenth; $i++){
    $code.= $str[mt_rand(0, strlen($str)-1)];		//从字符串中随机选择，每次选1个
}
$_SESSION['verify'] = $code; 				//将获取的随机数验证码写入到Session变量中，重新获取覆盖写入

$image = imagecreate($image_width,$image_height); 	//创建一个画布
imagecolorallocate($image,255,255,255);            	//设置画布的颜色
for($i=0;$i<strlen($_SESSION['verify']);$i++){     	//循环读取Session变量中的验证码
    $font  = mt_rand(3,5);                              	//设置随机的字体
    $x     = ($image_width*$i/4)+mt_rand(1,8);            //设置随机字符所在位置的X坐标，可以改为（1，1）试试，原理是起始线偏右一些
    $y     = mt_rand(0,$image_height/2);                //设置随机字符所在位置的Y坐标
    $color = imagecolorallocate($image,mt_rand(0,100),mt_rand(0,150),mt_rand(0,200));  //设置字符的颜色
    imagestring($image,$font,$x,$y,$_SESSION['verify'][$i],$color); //水平输出字符
}

//绘制干扰点元素
$pixel=100;
$black = imagecolorallocate($image, 0, 0, 0);
for($i=0;$i<$pixel;$i++){
    imagesetpixel($image, mt_rand(0, $image_width-1),mt_rand(0, $image_height-1),$black);
}
imagepng($image);                       				//生成PNG格式的图像
imagedestroy($image);                   				//释放图像资源

/**
 * 接受表单的内容
 */
session_start();
$checks = $_POST['verify'];
if($checks == ''){
    echo "<script>alert('验证码不能为空');window.location.href='login.php'</script>";
}
if($checks !== $_SESSION['verify']){
    echo "<script>alert('验证码错误');window.location.href='login.php'</script>";
}else {
    $pdo = new PDO("mysql:host=localhost;dbname=database11", 'root', 'root');
    $sql = 'select * from users where username=:username and password=:password';
    $res = $pdo->prepare($sql);

    $username = $_POST['username'];
    $password = $_POST['password'];

    $res->bindParam('username', $username);
    $res->bindParam('password', $password);

    $res->execute();
    $rows = $res->fetch(PDO::FETCH_BOTH);
    if ($rows) {
        setcookie('username', $rows['username'], time() + 3600 * 24 * 7);
        echo "<script>alert('成功');window.location.href='index.php'</script>";
    }else{
        echo "<script>alert('失败')</script>";
    }
}

<form role="form" method="post" action="checkLogin.php">
    <div>
        <h1>
            登录
        </h1>
        <input type="text" id="username" name="username" class="input" placeholder="请输入用户名" required>
        <input type="password" id="password" name="password" class="input" placeholder="密码" required>
        <input type="text" id="verify" name="verify" class="input" placeholder="请输入验证码" required>

        <a>
            <img src="verify.php" onclick="this.src=this.src+'?'+Math.random()">
        </a>

        <button type="submit">
            提交
        </button>
    </div>
</form>
五、	Ajax
<head>
    <title>用户注册界面</title>
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="cache-control" content="no-cache">
    <meta http-equiv="content-type" content="text/html;charset=utf-8"/>
    <script type="text/javascript">
        var http_request;
        function $(id) {
            return document.getElementById(id);
        }
        function sendRequest(){
            if (window.XMLHttpRequest)
            {// code for all new browsers
                http_request = new XMLHttpRequest();
            }
            else if (window.ActiveXObject)
            {// code for IE5 and IE6
                http_request = new ActiveXObject("Microsoft.XMLHTTP");
            }
            if(http_request){
                var url = "UserCheck.php?username="+$("username").value;
                http_request.open("GET",url,true);
                //到此为止，数据已经发给服务器了，接下来，看状态是否发生改变
                //如果状态发生改变了，说明服务器有回馈了，此时执行回调函数
                //在回调函数中，首先验证服务器返回的状态，是否代表了服务器连接及返回数据正确
                //如果正确，则将服务器返回的数据，写到相应的元素位置
                //否则，出错

                http_request.onreadystatechange = chuli;
                http_request.send(null);
            }
        }
        function chuli() {
            if(http_request.readyState == 4){
                if(http_request.status == 200){
                    $("myres").value = http_request.responseText;

                }
            }
        }
    </script>
</head>
<body>
    <form action="?" method="post">
        请输入用户名：
        <input type="text" name="username" id="username">
        <input type="button" onclick="sendRequest();" value="验证用户名是否被占用">
        <input style="color: red;border-width: 0" type="text" id="myres"><br/>
        请输入密码：
        <input type="password"><br/>
        <input type="submit" value="注册">
    </form>
</body>

$username = $_REQUEST['username'];
$pdo = new PDO("mysql:host=localhost;dbname=database11","root","root");
$sql = "select * from users where username = :username";
$res = $pdo->prepare($sql);
$res->bindParam('username',$username);
$res->execute();
$array = $res->fetch(PDO::FETCH_BOTH);
if($array){
    echo '用户名不可用';
}else if($username == NULL){
    echo '用户名不可为空';
}else{
    echo '用户名可用';
}
